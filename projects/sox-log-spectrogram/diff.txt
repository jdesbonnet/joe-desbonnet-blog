diff --git a/src/spectrogram.c b/src/spectrogram.c
index b3731ca..33d8159 100644
--- a/src/spectrogram.c
+++ b/src/spectrogram.c
@@ -54,13 +54,14 @@ static lsx_enum_item const window_options[] = {
 typedef struct {
   /* Parameters */
   double     pixels_per_sec, window_adjust;
-  int        x_size0, y_size, Y_size, dB_range, gain, spectrum_points, perm;
+  int        x_size0, y_size, Y_size, dB_range, gain, spectrum_points, perm, low_freq, high_freq;
   sox_bool   monochrome, light_background, high_colour, slack_overlap, no_axes;
   sox_bool   raw, alt_palette, truncate;
   win_type_t win_type;
   char const * out_name, * title, * comment;
   char const *duration_str, *start_time_str;
   sox_bool   using_stdout; /* output image to stdout */
+  sox_bool   log10_axis; /* plot frequency on log10 axis */
 
   /* Shared work area */
   double     * shared, * * shared_ptr;
@@ -100,6 +101,70 @@ static unsigned char const alt_palette[] =
   "\341\361\377\344\361\377\346\362\377\350\362\377\353";
 #define alt_palette_len ((array_length(alt_palette) - 1) / 3)
 
+/**
+ * Parse an integer and allow for multiplier suffix
+ * such as 'k' (x 1000) and 'M' (x 1000000).
+ * Return 0 of successful, -1 on failure.
+ */
+static int parse_num_with_suffix (const char *s, int *a) {
+
+  size_t n;
+  char k,dummy;
+
+  /* Empty string interpreted as 0 */
+  if (*s==0) {
+	return 0;
+  }
+
+  n = sscanf(s, "%d %c %c",a, &k, &dummy);
+  if (n < 1 || n > 2) {
+    return -1;
+  }
+
+  /* Allow for 'k' and 'M' suffix, but make case insensitive */
+  if (n==2) {
+    switch (k) {
+      case 'k':
+      case 'K':
+        *a *= 1000; 
+        break;
+      case 'M':
+      case 'm':
+        *a *= 1000000;
+        break;
+      default: return -1;
+    }
+  }
+
+  /* Success */
+  return 0;
+}
+
+/**
+ * Given a string in format <a>:<b> where <a> and <b> are integers
+ * but may have multiplier suffix eg 'k' (eg 10:1000 or 10:8k)
+ * return the upper and lower values as integers.
+ * If there is no colon set a value in 'a', and 
+ * b is left unchanged. If :<b> then 'a' will be set to 0.
+ * Return 0 of successful, -1 on failure.
+ */
+static int parse_range (const char *s, int *a, int *b) {
+  int a_status, b_status;
+  char *colon = index(s,':');
+  if (colon) {
+    /* Colon found, so have a number range */
+    *colon = 0; /* Temporarily put string terminator where colon is */
+    a_status = parse_num_with_suffix(s, a);
+    b_status = parse_num_with_suffix(colon+1,b);
+    *colon = ':'; /* Restore colon */
+    return a_status || b_status; 
+  } else {
+    /* no colon: so just one value */
+    return parse_num_with_suffix(s, a);
+  } 
+}
+
+
 static int getopts(sox_effect_t * effp, int argc, char **argv)
 {
   priv_t * p = (priv_t *)effp->priv;
@@ -107,11 +172,16 @@ static int getopts(sox_effect_t * effp, int argc, char **argv)
   char const * next;
   int c;
   lsx_getopt_t optstate;
-  lsx_getopt_init(argc, argv, "+S:d:x:X:y:Y:z:Z:q:p:W:w:st:c:AarmlhTo:", NULL, lsx_getopt_flag_none, 1, &optstate);
+  lsx_getopt_init(argc, argv, "+S:d:x:X:y:Y:z:Z:q:p:W:w:st:c:AarmlhTo:LR:", NULL, lsx_getopt_flag_none, 1, &optstate);
 
   p->dB_range = 120, p->spectrum_points = 249, p->perm = 1; /* Non-0 defaults */
   p->out_name = "spectrogram.png", p->comment = "Created by SoX";
 
+  /* Default to 0 -> nyquist freq. But don't have sample rate at this point so 
+   * set high_freq=-1 as flag. Replace with nyquist freq in stop() function. */
+  p->low_freq = 0;
+  p->high_freq = -1;
+
   while ((c = lsx_getopt(&optstate)) != -1) switch (c) {
     GETOPT_NUMERIC(optstate, 'x', x_size0       , 100, MAX_X_SIZE)
     GETOPT_NUMERIC(optstate, 'X', pixels_per_sec,  1 , 5000)
@@ -131,6 +201,7 @@ static int getopts(sox_effect_t * effp, int argc, char **argv)
     case 'l': p->light_background = sox_true;   break;
     case 'h': p->high_colour      = sox_true;   break;
     case 'T': p->truncate         = sox_true;   break;
+    case 'L': p->log10_axis       = sox_true;   break;
     case 't': p->title            = optstate.arg; break;
     case 'c': p->comment          = optstate.arg; break;
     case 'o': p->out_name         = optstate.arg; break;
@@ -140,6 +211,16 @@ static int getopts(sox_effect_t * effp, int argc, char **argv)
     case 'd': next = lsx_parsesamples(1e5, optstate.arg, &dummy, 't');
       if (next && !*next) {p->duration_str = lsx_strdup(optstate.arg); break;}
       return lsx_usage(effp);
+    case 'R': 
+      if ( parse_range (optstate.arg, &p->low_freq, &p->high_freq)) {
+         lsx_fail("Frequency range `%s' is invalid", optstate.arg);
+         exit(1);
+      }
+      if (p->low_freq < 0 || p->high_freq < 0) {
+        lsx_fail("Frequency range `%s' is invalid. Frequencies must be positive.", optstate.arg);
+        exit(1);
+      }
+      break;
     default: lsx_fail("invalid option `-%c'", optstate.opt); return lsx_usage(effp);
   }
   if (!!p->x_size0 + !!p->pixels_per_sec + !!p->duration_str > 2) {
@@ -167,6 +248,8 @@ static int getopts(sox_effect_t * effp, int argc, char **argv)
   return optstate.ind !=argc || p->win_type == INT_MAX? lsx_usage(effp) : SOX_SUCCESS;
 }
 
+
+
 static double make_window(priv_t * p, int end)
 {
   double sum = 0, * w = end < 0? p->window : p->window + end;
@@ -545,6 +628,27 @@ static int stop(sox_effect_t * effp) /* only called, by end(), on flow 0 */
   char        text[200], * prefix;
   double      limit;
 
+  float log10_low_freq, log10_high_freq;
+  float nyquist_freq = (float)effp->in_signal.rate / 2;
+
+  /* No chart upper freq set, so use nyquist freq as default */
+  if (p->high_freq == -1) {
+    p->high_freq = effp->in_signal.rate/2;
+  }
+  /* Cannot have 0Hz on log axis. Use 1Hz instead. */
+  if (p->log10_axis && p->low_freq==0) {
+    p->low_freq = 1;
+  }
+  /* Lower freq must be less than higher freq. Swap if not. */
+  if (p->low_freq >= p->high_freq) {
+    int tmp = p->low_freq;
+    p->low_freq = p->high_freq;
+    p->high_freq = tmp;
+  }
+
+  log10_low_freq = log10f((float)p->low_freq);
+  log10_high_freq = log10f((float)p->high_freq);
+
   free(p->shared);
   if (p->using_stdout) {
     SET_BINARY_MODE(stdout);
@@ -571,11 +675,28 @@ static int stop(sox_effect_t * effp) /* only called, by end(), on flow 0 */
 
   /* Spectrogram */
   for (k = 0; k < chans; ++k) {
+    int freq, dBfsi;
+    float log_scale_factor = (log10_high_freq- log10_low_freq)/(float)p->rows;
+    float lin_scale_factor = (p->high_freq-p->low_freq)/(float)p->rows;
+
     priv_t * q = (priv_t *)(effp - effp->flow + k)->priv;
     base = !p->raw * below + (chans - 1 - k) * (p->rows + 1);
+
     for (j = 0; j < p->rows; ++j) {
-      for (i = 0; i < p->cols; ++i)
-        pixel(!p->raw * left + i, base + j) = colour(p, q->dBfs[i*p->rows + j]);
+      if (p->log10_axis) {
+        freq = (int)powf (10.0, (float)j * log_scale_factor + log10_low_freq);
+      } else {
+        freq = (float)j * lin_scale_factor + p->low_freq;
+      }
+      /* dBfsi: the index into dBfs[] corresponding to frequency at row j */
+      dBfsi  = (freq*p->rows)/nyquist_freq;
+      /* It is possible that upper freq > nyquist freq: deal with that */
+      if (dBfsi >= p->rows) {
+        dBfsi = p->rows-1;
+      }
+      for (i = 0; i < p->cols; ++i) {
+        pixel(!p->raw * left + i, base + j) = colour(p, q->dBfs[i*p->rows + dBfsi]);
+      } 
       if (!p->raw && !p->no_axes)                                 /* Y-axis lines */
         pixel(left - 1, base + j) = pixel(left + p->cols, base + j) = Grid;
     }
@@ -607,25 +728,67 @@ static int stop(sox_effect_t * effp) /* only called, by end(), on flow 0 */
     }
 
     /* Y-axis */
-    step = axis(effp->in_signal.rate / 2,
+    if (p->log10_axis) {
+      /* Log Y axis ticks and labels */
+
+      int x,y;
+      int start_decade = (int)log10_low_freq;
+      int end_decade = (int)log10_high_freq;
+      float log_scale = (float)p->rows/(log10_high_freq - log10_low_freq);
+
+      print_up(10, below + (c_rows - font_X * (int)strlen(text)) / 2, Text, "Frequency (Hz)");
+
+      for (k = 0; k < chans; ++k) {
+        base = below + k * (p->rows + 1);
+	/* Label 10^n decades in view */
+        for (i = start_decade; i <= end_decade; i++) {
+          int f = (int)powf(10.0,(float)i);
+          y = ( (float)i-log10_low_freq)*log_scale;
+          if (y>=0) {
+            sprintf(text, i?"%5i":"   DC",  f);          /* Tick label (left) */
+            print_at(left - 4 - font_X * 5, base + y + 5, Labels, text);
+            sprintf(text, i?"%i":"DC",  f);              /* Tick label (right) */
+            print_at(left + p->cols + 6, base + y + 5, Labels, text);
+          }
+
+          /* intra-decade tick marks */
+          for (j = 0; j < 10; j++) {
+            y = (log10f((float)(f + j*f))-log10_low_freq)*log_scale;
+            if (y>0 && y < p->rows) {
+              for (x = 0; x < tick_len; ++x) {
+                pixel(left-1-x, base+y) = pixel(left+p->cols+x, base+y) = Grid;
+              }
+            }
+          }
+
+        }
+
+      }
+    } else {
+      /* Linear Y axis ticks and labels */
+      step = axis(p->high_freq - p->low_freq,
         (p->rows - 1) / ((font_y * 3 + 1) >> 1), &limit, &prefix);
-    sprintf(text, "Frequency (%.1sHz)", prefix);         /* Axis label */
-    print_up(10, below + (c_rows - font_X * (int)strlen(text)) / 2, Text, text);
-    for (k = 0; k < chans; ++k) {
-      base = below + k * (p->rows + 1);
-      for (i = 0; i <= limit; i += step) {
-        int x, y = limit? (double)i / limit * (p->rows - 1) + .5 : 0;
-        for (x = 0; x < tick_len; ++x)                   /* Ticks */
-          pixel(left-1-x, base+y) = pixel(left+p->cols+x, base+y) = Grid;
-        if ((step == 5 && (i%10)) || (!i && k && chans > 1))
-          continue;
-        sprintf(text, i?"%5g":"   DC", .1 * i);          /* Tick labels */
-        print_at(left - 4 - font_X * 5, base + y + 5, Labels, text);
-        sprintf(text, i?"%g":"DC", .1 * i);
-        print_at(left + p->cols + 6, base + y + 5, Labels, text);
+      sprintf(text, "Frequency (%.1sHz)", prefix);         /* Axis label */
+      print_up(10, below + (c_rows - font_X * (int)strlen(text)) / 2, Text, text);
+      for (k = 0; k < chans; ++k) {
+        base = below + k * (p->rows + 1);
+        for (i = 0; i <= limit; i += step) {
+          int f = p->low_freq/100 + i;                     /* Frequency in 100Hz units */
+          int x, y = limit? (double)i / limit * (p->rows - 1) + .5 : 0;
+          for (x = 0; x < tick_len; ++x)                   /* Ticks */
+            pixel(left-1-x, base+y) = pixel(left+p->cols+x, base+y) = Grid;
+          if ((step == 5 && (i%10)) || (!i && k && chans > 1))
+            continue;
+
+          sprintf(text, f?"%5g":"   DC", .1 * f);          /* Tick labels */
+          print_at(left - 4 - font_X * 5, base + y + 5, Labels, text);
+          sprintf(text, f?"%g":"DC", .1 * f);
+          print_at(left + p->cols + 6, base + y + 5, Labels, text);
+        }
       }
     }
 
+
     /* Z-axis */
     k = min(400, c_rows);
     base = below + (c_rows - k) / 2;
@@ -684,6 +847,8 @@ sox_effect_handler_t const * lsx_spectrogram_effect_fn(void)
     "\t-l\tLight background",
     "\t-m\tMonochrome",
     "\t-h\tHigh colour",
+    "\t-L\tPlot frequency on log axis",
+    "\t-R l:h\tSpecify frequency range (from l to h) to chart",
     "\t-p num\tPermute colours (1 - 6); default 1",
     "\t-A\tAlternative, inferior, fixed colour-set (for compatibility only)",
     "\t-t text\tTitle text",
@@ -691,6 +856,7 @@ sox_effect_handler_t const * lsx_spectrogram_effect_fn(void)
     "\t-o text\tOutput file name; default `spectrogram.png'",
     "\t-d time\tAudio duration to fit to X-axis; e.g. 1:00, 48",
     "\t-S position\tStart the spectrogram at the given input position",
+
   };
   static char * usage;
   handler.usage = lsx_usage_lines(&usage, lines, array_length(lines));
